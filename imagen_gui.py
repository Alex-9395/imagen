# imagen_gui.py - Imagen 3 Batch Generator —Å GUI
import tkinter as tk
from tkinter import ttk, scrolledtext, messagebox, filedialog
import threading
import time
import pathlib
import concurrent.futures
import vertexai
from vertexai.preview.vision_models import ImageGenerationModel
import os
import subprocess

class ImagenBatchGenerator:
    def __init__(self, root):
        self.root = root
        self.root.title("üé® Imagen 3 Batch Generator Pro")
        self.root.geometry("800x700")
        self.root.resizable(True, True)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
        self.PROJECT_ID = "my-imagen-generator"
        self.LOCATION = "us-central1"
        self.MODEL_ID = "imagen-3.0-generate-002"
        self.model = None
        self.is_generating = False
        
        self.create_widgets()
        self.init_vertex_ai()

    def create_widgets(self):
        # –ì–ª–∞–≤–Ω–∞—è —Ä–∞–º–∫–∞
        main_frame = ttk.Frame(self.root, padding="10")
        main_frame.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = ttk.Label(main_frame, text="üé® Imagen 3 Batch Generator Pro", 
                               font=('Arial', 16, 'bold'))
        title_label.grid(row=0, column=0, columnspan=3, pady=(0, 20))
        
        # === –ù–ê–°–¢–†–û–ô–ö–ò ===
        settings_frame = ttk.LabelFrame(main_frame, text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏", padding="10")
        settings_frame.grid(row=1, column=0, columnspan=3, sticky=(tk.W, tk.E), pady=(0, 10))
        
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–∞ –ø—Ä–æ–º–ø—Ç
        ttk.Label(settings_frame, text="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –Ω–∞ –ø—Ä–æ–º–ø—Ç:").grid(row=0, column=0, sticky=tk.W)
        self.variations_var = tk.StringVar(value="3")
        variations_combo = ttk.Combobox(settings_frame, textvariable=self.variations_var, 
                                      values=["1", "2", "3", "4", "5"], width=5, state="readonly")
        variations_combo.grid(row=0, column=1, sticky=tk.W, padx=(10, 0))
        
        # –†–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        ttk.Label(settings_frame, text="–†–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:").grid(row=0, column=2, sticky=tk.W, padx=(20, 0))
        self.aspect_var = tk.StringVar(value="1:1")
        aspect_combo = ttk.Combobox(settings_frame, textvariable=self.aspect_var,
                                   values=["1:1", "16:9", "9:16", "4:3", "3:4"], width=8, state="readonly")
        aspect_combo.grid(row=0, column=3, sticky=tk.W, padx=(10, 0))
        
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤
        ttk.Label(settings_frame, text="–ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –ø–æ—Ç–æ–∫–æ–≤:").grid(row=1, column=0, sticky=tk.W, pady=(10, 0))
        self.workers_var = tk.StringVar(value="2")
        workers_combo = ttk.Combobox(settings_frame, textvariable=self.workers_var,
                                   values=["1", "2", "3", "4"], width=5, state="readonly")
        workers_combo.grid(row=1, column=1, sticky=tk.W, padx=(10, 0), pady=(10, 0))
        
        # === –ü–†–û–ú–ü–¢–´ ===
        prompts_frame = ttk.LabelFrame(main_frame, text="üìù –ü—Ä–æ–º–ø—Ç—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏", padding="10")
        prompts_frame.grid(row=2, column=0, columnspan=3, sticky=(tk.W, tk.E, tk.N, tk.S), pady=(0, 10))
        
        # –¢–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ –¥–ª—è –ø—Ä–æ–º–ø—Ç–æ–≤
        self.prompts_text = scrolledtext.ScrolledText(prompts_frame, height=12, wrap=tk.WORD)
        self.prompts_text.grid(row=0, column=0, columnspan=3, sticky=(tk.W, tk.E, tk.N, tk.S), pady=(0, 10))
        
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–æ–º–ø—Ç–∞–º–∏
        ttk.Button(prompts_frame, text="üìÇ –ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ —Ñ–∞–π–ª–∞", 
                  command=self.load_prompts).grid(row=1, column=0, sticky=tk.W)
        ttk.Button(prompts_frame, text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ —Ñ–∞–π–ª", 
                  command=self.save_prompts).grid(row=1, column=1, padx=(10, 0))
        ttk.Button(prompts_frame, text="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å", 
                  command=self.clear_prompts).grid(row=1, column=2, padx=(10, 0))
        
        # === –£–ü–†–ê–í–õ–ï–ù–ò–ï ===
        control_frame = ttk.Frame(main_frame)
        control_frame.grid(row=3, column=0, columnspan=3, sticky=(tk.W, tk.E), pady=(0, 10))
        
        # –ë–æ–ª—å—à–∞—è –∫–Ω–æ–ø–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        self.generate_btn = ttk.Button(control_frame, text="üöÄ –ó–ê–ü–£–°–¢–ò–¢–¨ –ì–ï–ù–ï–†–ê–¶–ò–Æ", 
                                      command=self.start_generation, style='Accent.TButton')
        self.generate_btn.grid(row=0, column=0, columnspan=2, sticky=(tk.W, tk.E), pady=(0, 10))
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        ttk.Button(control_frame, text="üìÅ –û—Ç–∫—Ä—ã—Ç—å –ø–∞–ø–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤", 
                  command=self.open_results_folder).grid(row=1, column=0, sticky=(tk.W, tk.E), padx=(0, 5))
        ttk.Button(control_frame, text="üîÑ –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –ø–∞–ø–∫—É", 
                  command=self.create_new_folder).grid(row=1, column=1, sticky=(tk.W, tk.E), padx=(5, 0))
        
        # === –ü–†–û–ì–†–ï–°–° –ò –°–¢–ê–¢–£–° ===
        progress_frame = ttk.LabelFrame(main_frame, text="üìä –ü—Ä–æ–≥—Ä–µ—Å—Å", padding="10")
        progress_frame.grid(row=4, column=0, columnspan=3, sticky=(tk.W, tk.E), pady=(0, 10))
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä
        self.progress_bar = ttk.Progressbar(progress_frame, mode='determinate')
        self.progress_bar.grid(row=0, column=0, sticky=(tk.W, tk.E), pady=(0, 5))
        
        # –°—Ç–∞—Ç—É—Å
        self.status_var = tk.StringVar(value="‚úÖ –ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        self.status_label = ttk.Label(progress_frame, textvariable=self.status_var)
        self.status_label.grid(row=1, column=0, sticky=tk.W)
        
        # –õ–æ–≥
        self.log_text = scrolledtext.ScrolledText(progress_frame, height=6)
        self.log_text.grid(row=2, column=0, sticky=(tk.W, tk.E, tk.N, tk.S), pady=(5, 0))
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å—Ç—è–≥–∏–≤–∞–Ω–∏—è
        self.root.columnconfigure(0, weight=1)
        self.root.rowconfigure(0, weight=1)
        main_frame.columnconfigure(0, weight=1)
        main_frame.rowconfigure(2, weight=1)
        prompts_frame.columnconfigure(0, weight=1)
        prompts_frame.rowconfigure(0, weight=1)
        control_frame.columnconfigure(0, weight=1)
        control_frame.columnconfigure(1, weight=1)
        progress_frame.columnconfigure(0, weight=1)
        progress_frame.rowconfigure(2, weight=1)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–∏–º–µ—Ä–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã
        self.load_sample_prompts()

    def init_vertex_ai(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Vertex AI"""
        def init_in_thread():
            try:
                self.log("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Vertex AI...")
                vertexai.init(project=self.PROJECT_ID, location=self.LOCATION)
                self.model = ImageGenerationModel.from_pretrained(self.MODEL_ID)
                self.log("‚úÖ Vertex AI –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
                self.status_var.set("‚úÖ –ì–æ—Ç–æ–≤ –∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")
            except Exception as e:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
                self.status_var.set("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
        
        threading.Thread(target=init_in_thread, daemon=True).start()

    def log(self, message):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª–æ–≥"""
        timestamp = time.strftime("%H:%M:%S")
        log_message = f"[{timestamp}] {message}\n"
        self.log_text.insert(tk.END, log_message)
        self.log_text.see(tk.END)
        self.root.update_idletasks()

    def load_sample_prompts(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø—Ä–∏–º–µ—Ä–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã"""
        sample_prompts = """–∫—Ä–∞—Å–∏–≤—ã–π –∑–∞–∫–∞—Ç –Ω–∞–¥ –æ–∫–µ–∞–Ω–æ–º, —Ñ–æ—Ç–æ—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ
—Ñ—É—Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –≥–æ—Ä–æ–¥, –Ω–µ–æ–Ω–æ–≤—ã–µ –æ–≥–Ω–∏, –∫–∏–±–µ—Ä–ø–∞–Ω–∫ —Å—Ç–∏–ª—å
—É—é—Ç–Ω–∞—è –≥–æ—Å—Ç–∏–Ω–∞—è —Å –∫–∞–º–∏–Ω–æ–º, —Ç–µ–ø–ª—ã–π —Å–≤–µ—Ç, –∑–∏–º–∞ –∑–∞ –æ–∫–Ω–æ–º
–∫–æ—Å–º–∏—á–µ—Å–∫–∏–π –∫–æ—Ä–∞–±–ª—å –≤ –¥–∞–ª–µ–∫–æ–π –≥–∞–ª–∞–∫—Ç–∏–∫–µ, –∑–≤–µ–∑–¥—ã, –¥—Ä–∞–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ
–ø–æ—Ä—Ç—Ä–µ—Ç –∫—Ä–∞—Å–∏–≤–æ–π –¥–µ–≤—É—à–∫–∏ –≤ –≤–∏–Ω—Ç–∞–∂–Ω–æ–º —Å—Ç–∏–ª–µ, —Ä–µ—Ç—Ä–æ –º–æ–¥–∞
–≥–æ—Ä–Ω—ã–π –ø–µ–π–∑–∞–∂ –Ω–∞ —Ä–∞—Å—Å–≤–µ—Ç–µ, —Ç—É–º–∞–Ω, —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –ø—Ä–∏—Ä–æ–¥—ã"""
        self.prompts_text.insert("1.0", sample_prompts)

    def load_prompts(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø—Ä–æ–º–ø—Ç—ã –∏–∑ —Ñ–∞–π–ª–∞"""
        filename = filedialog.askopenfilename(
            title="–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª —Å –ø—Ä–æ–º–ø—Ç–∞–º–∏",
            filetypes=[("–¢–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã", "*.txt"), ("–í—Å–µ —Ñ–∞–π–ª—ã", "*.*")]
        )
        if filename:
            try:
                with open(filename, 'r', encoding='utf-8') as f:
                    content = f.read()
                self.prompts_text.delete("1.0", tk.END)
                self.prompts_text.insert("1.0", content)
                self.log(f"üìÇ –ü—Ä–æ–º–ø—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ {filename}")
            except Exception as e:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª: {e}")

    def save_prompts(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø—Ä–æ–º–ø—Ç—ã –≤ —Ñ–∞–π–ª"""
        filename = filedialog.asksaveasfilename(
            title="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ–º–ø—Ç—ã",
            defaultextension=".txt",
            filetypes=[("–¢–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã", "*.txt"), ("–í—Å–µ —Ñ–∞–π–ª—ã", "*.*")]
        )
        if filename:
            try:
                content = self.prompts_text.get("1.0", tk.END)
                with open(filename, 'w', encoding='utf-8') as f:
                    f.write(content)
                self.log(f"üíæ –ü—Ä–æ–º–ø—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {filename}")
            except Exception as e:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª: {e}")

    def clear_prompts(self):
        """–û—á–∏—â–∞–µ—Ç –ø–æ–ª–µ –ø—Ä–æ–º–ø—Ç–æ–≤"""
        if messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", "–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –ø—Ä–æ–º–ø—Ç—ã?"):
            self.prompts_text.delete("1.0", tk.END)
            self.log("üóëÔ∏è –ü—Ä–æ–º–ø—Ç—ã –æ—á–∏—â–µ–Ω—ã")

    def get_prompts_list(self):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–º–ø—Ç–æ–≤ –∏–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—è"""
        content = self.prompts_text.get("1.0", tk.END)
        prompts = [line.strip() for line in content.splitlines() if line.strip()]
        return prompts

    def clean_filename(self, text, max_len=30):
        """–°–æ–∑–¥–∞–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞"""
        clean = "".join(c for c in text if c.isalnum() or c in (" ", "_", "-"))
        return clean[:max_len].strip().replace(" ", "_")

    def generate_for_prompt(self, prompt_data):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –æ–¥–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞"""
        index, prompt, total_prompts = prompt_data
        
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
            progress = (index / total_prompts) * 100
            self.progress_bar['value'] = progress
            
            self.log(f"üé® [{index+1}/{total_prompts}] {prompt[:40]}...")
            
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è
            images = self.model.generate_images(
                prompt=prompt,
                number_of_images=int(self.variations_var.get()),
                aspect_ratio=self.aspect_var.get(),
                safety_filter_level="block_some",
                person_generation="allow_adult"
            )
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
            outdir = pathlib.Path("results")
            outdir.mkdir(exist_ok=True)
            
            saved_files = []
            timestamp = int(time.time() * 1000)
            base_name = self.clean_filename(prompt)
            
            for i, image in enumerate(images, start=1):
                filename = f"{timestamp}_{base_name}_v{i}.png"
                filepath = outdir / filename
                image.save(filepath)
                saved_files.append(str(filepath))
            
            self.log(f"‚úÖ [{index+1}/{total_prompts}] –ì–æ—Ç–æ–≤–æ: {len(saved_files)} —Ñ–∞–π–ª–æ–≤")
            return len(saved_files)
            
        except Exception as e:
            self.log(f"‚ùå [{index+1}/{total_prompts}] –û—à–∏–±–∫–∞: {str(e)[:50]}...")
            return 0

    def start_generation(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        if self.is_generating:
            messagebox.showwarning("–í–Ω–∏–º–∞–Ω–∏–µ", "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞!")
            return
            
        prompts = self.get_prompts_list()
        if not prompts:
            messagebox.showwarning("–í–Ω–∏–º–∞–Ω–∏–µ", "–í–≤–µ–¥–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ø—Ä–æ–º–ø—Ç!")
            return
            
        if not self.model:
            messagebox.showerror("–û—à–∏–±–∫–∞", "Vertex AI –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!")
            return
        
        def generation_thread():
            self.is_generating = True
            self.generate_btn.config(text="‚è≥ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è...", state="disabled")
            self.status_var.set("üîÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...")
            
            start_time = time.time()
            total_images = 0
            
            try:
                max_workers = int(self.workers_var.get())
                self.log(f"üöÄ –ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {len(prompts)} –ø—Ä–æ–º–ø—Ç–æ–≤, {max_workers} –ø–æ—Ç–æ–∫–æ–≤")
                
                with concurrent.futures.ThreadPoolExecutor(max_workers=max_workers) as executor:
                    futures = [executor.submit(self.generate_for_prompt, (i, prompt, len(prompts))) 
                              for i, prompt in enumerate(prompts)]
                    
                    for future in concurrent.futures.as_completed(futures):
                        total_images += future.result()
                
                elapsed_time = time.time() - start_time
                
                self.log("=" * 50)
                self.log("üéØ –ì–ï–ù–ï–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê!")
                self.log(f"‚è±Ô∏è –í—Ä–µ–º—è: {elapsed_time:.1f} —Å–µ–∫")
                self.log(f"üñºÔ∏è –°–æ–∑–¥–∞–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {total_images}")
                self.log(f"üìÅ –ü–∞–ø–∫–∞: {pathlib.Path('results').absolute()}")
                
                self.progress_bar['value'] = 100
                self.status_var.set(f"‚úÖ –ì–æ—Ç–æ–≤–æ! {total_images} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
                
                messagebox.showinfo("–ì–æ—Ç–æ–≤–æ!", 
                                   f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
                                   f"–°–æ–∑–¥–∞–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {total_images}\n"
                                   f"–í—Ä–µ–º—è: {elapsed_time:.1f} —Å–µ–∫—É–Ω–¥")
                
            except Exception as e:
                self.log(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
                self.status_var.set("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            
            finally:
                self.is_generating = False
                self.generate_btn.config(text="üöÄ –ó–ê–ü–£–°–¢–ò–¢–¨ –ì–ï–ù–ï–†–ê–¶–ò–Æ", state="normal")
        
        threading.Thread(target=generation_thread, daemon=True).start()

    def open_results_folder(self):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –ø–∞–ø–∫—É —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏"""
        results_path = pathlib.Path("results")
        results_path.mkdir(exist_ok=True)
        
        try:
            if os.name == 'nt':  # Windows
                os.startfile(results_path)
            else:  # macOS/Linux
                subprocess.run(['open' if os.name == 'posix' else 'xdg-open', results_path])
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –ø–∞–ø–∫—É: {e}")

    def create_new_folder(self):
        """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –ø–∞–ø–∫—É –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        timestamp = time.strftime("%Y%m%d_%H%M%S")
        new_folder = pathlib.Path(f"results_{timestamp}")
        new_folder.mkdir(exist_ok=True)
        self.log(f"üìÅ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞: {new_folder}")
        messagebox.showinfo("–ì–æ—Ç–æ–≤–æ", f"–°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –ø–∞–ø–∫–∞:\n{new_folder.absolute()}")

def main():
    root = tk.Tk()
    app = ImagenBatchGenerator(root)
    root.mainloop()

if __name__ == "__main__":
    main()
